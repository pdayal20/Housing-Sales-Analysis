# -*- coding: utf-8 -*-
"""Housing sales analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j3VPkbX6UEEdSKpjOumArUDYLKCxyXKx
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Loading dataset into a DataFrame(data)

data = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Chennai houseing sale.csv")
data.head()

"""# **Cleaning the data**"""

data_shape = data.shape
print(f"The dataframe has {data_shape[0]} records and {data_shape[1]} features")

#Checking For Missing Values

data.isna().any()

#Counts of NULL(na)

data.isna().sum()

data.dropna(inplace=True)
data.isna().sum()

data.info()

data.nunique()

"""**Checking Outliers**"""

sns.boxplot(data['SALES_PRICE'])

"""**In the above graph , can clearly see that values above 2.0 are acting as the outliers.**

# **Feature engineering**
"""

data.dtypes

"""Some of the features are not very convenient. That's why we're going to change some of them to have more representative features. Among them, we can find these changes :

1.Making a new column called **Total_Price** (reg_fee+commis+sales_price)

2.Change object(dtype) to data_time_format for DATA_SALE and DATE_BUILD

3.Making a new column called **AGE** (DATE_BUILD - DATE_SALE)

4.Making a change to datatypes of bedroom and bathroom 

5.Changing Spelling
"""

data['Total_Price'] = data['REG_FEE'] + data['COMMIS'] + data['SALES_PRICE']

data['DATE_SALE'] = pd.to_datetime(data['DATE_SALE'],format='%d-%m-%Y')
data['DATE_BUILD'] = pd.to_datetime(data['DATE_BUILD'],format='%d-%m-%Y')

data['AGE'] = pd.DatetimeIndex(data['DATE_SALE']).year - pd.DatetimeIndex(data['DATE_BUILD']).year

data['QS_BATHROOM'] = data['QS_BATHROOM'].astype(int)
data['QS_BEDROOM'] = data['QS_BEDROOM'].astype(int)

data['AREA'].unique()

data['AREA'].replace(['Ann Nagar','Ana Nagar'],'Anna Nagar',inplace=True)
data['AREA'].replace(['Karapakam'],'Karapakkam',inplace=True)
data['AREA'].replace('Velchery','Velachery',inplace=True)
data['AREA'].replace(['Adyar','Adyr'],'Adyar',inplace=True)
data['AREA'].replace(['Chrompet','Chrompt','Chrmpet'],'chrompet',inplace=True)
data['AREA'].replace(['KKNagar'],'KK Nagar',inplace=True)
data['AREA'].replace(['TNagar'],'T Nagar',inplace=True)
data['PARK_FACIL'].replace('Noo','No',inplace=True)
data['UTILITY_AVAIL'].replace('AllPub','All Pub',inplace=True)
data['UTILITY_AVAIL'].replace('NoSewr','NoSeWa',inplace=True)
data['BUILDTYPE'].replace('Comercial','Commercial',inplace=True)
data['BUILDTYPE'].replace('Other','Others',inplace=True)

data['SALE_COND'] = data['SALE_COND'].replace({'adj land':'adjland', 
                       'normal sale':'normal sale',
                       'partiall':'partial',
                       'ab normal':'abnormal'})

data['SALE_COND'].unique()

data['BUILDTYPE'].unique()

data['AREA'].unique()

"""# **EDA**"""

data.dtypes

data['N_BEDROOM'].value_counts().plot(kind='pie')

data['PARK_FACIL'].value_counts().plot(kind='bar')

data.describe()

data['Total_Price'].describe()

print("The median Total_price is ",data['Total_Price'].median(),"Lets see how it varies with INT_SQFT")
plt.figure(figsize=(15,5))
sns.scatterplot(data['INT_SQFT'],data['Total_Price'])

fig, (ax1,ax2) = plt.subplots(1,2,figsize=(25,7))
fig.suptitle("SQFT VS Total_Price depending upon no.of Bedroom")

sns.scatterplot(x=data['INT_SQFT'],y=data['Total_Price'],data = data,hue='N_BEDROOM',ax=ax1)
sns.boxplot(x=data['N_BEDROOM'],y=data['Total_Price'])

"""From the above two graphs we can conclude

1. Total_Price and SQFT have a Positive correlation
1. Number of Bedroom is directly proportional to Total_Price inc
"""

print("The median Total_price is ",data['Total_Price'].median(),"Lets see how it varies with AGE of the House")
plt.figure(figsize=(15,5))
sns.scatterplot(data['AGE'],data['Total_Price'])

fig, (ax1,ax2) = plt.subplots(1,2,figsize=(25,7))
fig.suptitle("SQFT VS Total_Price depending upon no.of Sales_Condition")

sns.scatterplot(x=data['INT_SQFT'],y=data['Total_Price'],data = data,hue='SALE_COND',ax=ax1)
sns.boxplot(x=data['SALE_COND'],y=data['Total_Price'])

fig, (ax1,ax2) = plt.subplots(1,2,figsize=(25,7))
fig.suptitle("SQFT VS Total_Price depending upon no.of Parking Fac")

sns.scatterplot(x=data['INT_SQFT'],y=data['Total_Price'],data = data,hue='PARK_FACIL',ax=ax1)
sns.boxplot(x=data['PARK_FACIL'],y=data['Total_Price'])

"""Let we see how price varies btw dist from the main road"""

sns.scatterplot(data['Total_Price'],data['DIST_MAINROAD'])

fig, (ax1,ax2) = plt.subplots(1,2,figsize=(25,7))
fig.suptitle("SQFT VS Total_Price depending upon no.of UTILITY_AVAIL")

sns.scatterplot(x=data['INT_SQFT'],y=data['Total_Price'],data = data,hue='UTILITY_AVAIL',ax=ax1)
sns.boxplot(x=data['UTILITY_AVAIL'],y=data['Total_Price'])

plt.figure(figsize=(20,10))
sns.heatmap(data.corr(),annot=True,cbar=False,cmap='Greys',linewidths=0.1)

sns.pairplot(data)
plt.show()

data.dtypes

from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()

data['AREA'] = encoder.fit_transform(data['AREA'])
data['SALE_COND'] = encoder.fit_transform(data['SALE_COND'])
data['PARK_FACIL'] = encoder.fit_transform(data['PARK_FACIL'])
data['SALE_COND'] = encoder.fit_transform(data['SALE_COND'])
data['UTILITY_AVAIL'] = encoder.fit_transform(data['UTILITY_AVAIL'])
data['STREET'] = encoder.fit_transform(data['STREET'])
data['MZZONE'] = encoder.fit_transform(data['MZZONE'])
data['BUILDTYPE'] = encoder.fit_transform(data['BUILDTYPE'])

data.dtypes

y = data['Total_Price']
x = data.drop(['Total_Price','QS_OVERALL','QS_BEDROOM','QS_BATHROOM','DATE_BUILD','DATE_SALE','PRT_ID'],axis=1) #selecting features
x

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.33,random_state=0)

pd.DataFrame(x_train, columns=x_train.columns).plot(kind='box',figsize=(20,7))
plt.show()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
model = scaler.fit(x_train)
xtrain = pd.DataFrame(model.transform(x_train),columns=x_train.columns)
xtest = pd.DataFrame(model.transform(x_test),columns=x_test.columns)
xtrain.plot(kind='box',figsize=(20,7))

"""2. **LinearRegression**"""

from sklearn.linear_model import LinearRegression
reg = LinearRegression()
reg.fit(xtrain,y_train)
y_pred = reg.predict(xtest)

from sklearn.metrics import r2_score
print(r2_score(y_test,y_pred))

x_ax = range(len(y_test))
plt.plot(x_ax, y_test, linewidth=1, label="original")
plt.plot(x_ax, y_pred, linewidth=1.1, label="predicted")
plt.title("y-test and y-predicted data")
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend(loc='best',fancybox=True, shadow=True)
plt.grid(True)
plt.show()